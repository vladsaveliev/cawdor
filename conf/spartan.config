params {
  genome_base = params.genome == 'GRCh37' ? '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37' : params.genome == 'GRCh38' ? '/sw/data/uppnex/ToolBox/hg38bundle' : 'References/smallGRCh37'
  runTime       = 48.h
  singleCPUMem  = 7.GB // for processes that are using more memory but a single CPU only. Use the 'core' queue for these
}

// Extended set of fields, e.g. native_id, cpu and memory:
trace.fields = 'process,task_id,hash,name,native_id,attempt,status,exit,realtime,cpus,memory,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'

process {
  clusterOptions = {"-A $params.project"}
  cpus = 16
  executor = 'slurm'
  memory = 110.GB
  queue = 'node'
  scratch = true
  time = 48.h

  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 3

  withName:BuildBWAindexes {
  }
  withName:BuildReferenceIndex {
  }
  withName:BuildSAMToolsIndex {
  }
  withName:BuildVCFIndex {
  }
  withName:ConcatVCF {
    queue = 'core'
  }
  withName:CreateRecalibrationTable {
    cpus = 10
    memory = {params.singleCPUMem * 8 * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  withName:MapReads {
    time = {params.runTime * task.attempt}
  }
  withName:MarkDuplicates {
		// Actually the -Xmx value should be kept lower
    cpus = 16
    memory = {2 * params.singleCPUMem}
  }
  withName:MergeBams {
    memory = {params.singleCPUMem * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  withName:RecalibrateBam {
    cpus = 8
    memory = {params.singleCPUMem * 8 * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  withName:RunAlleleCount {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
    queue = 'core'
  }
  withName:RunAscat {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
    queue = 'core'
  }
  withName:RunBamQCmapped {
    cpus = 16
  }
  withName:RunBamQCrecalibrated {
    cpus = 16
  }
  withName:RunBcftoolsStats {
    cpus = 1
  }
  withName:RunConvertAlleleCounts {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
    queue = 'core'
  }
  withName:RunFastQC {
    cpus = 2 // FastQC is only capable of running one thread per fastq file.
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunFreeBayes {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  withName:RunHaplotypecaller {
    cpus = 1
    // Increase memory quadratically
    memory = {params.singleCPUMem * task.attempt * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  withName:RunGenotypeGVCFs {
    cpus = 1
    memory = {params.singleCPUMem}
  }
  withName:RunManta {
  }
  withName:RunMultiQC {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunMutect2 {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
    queue = 'core'
    time = {params.runTime * task.attempt}
  }
  withName:RunSamtoolsStats {
    cpus = 1
    time = {params.runTime * task.attempt}
  }
  withName:RunSingleManta {
  }
  withName:RunSingleStrelka {
    time = {params.runTime * task.attempt}
  }
  withName:RunSnpeff {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunStrelka {
    time = {params.runTime * task.attempt}
  }
  withName:RunVEP {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
}
