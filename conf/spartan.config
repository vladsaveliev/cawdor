params {
  runTime       = 48.h
  singleCPUMem  = 7.GB // for processes that are using more memory but a single CPU only. Use the 'core' queue for these
}

process {
  cpus = 32
  executor = 'slurm'
  memory = 110.GB
  queue = 'vccc'
  time = 48.h

  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 3

  withName:BuildBWAindexes {
  }
  withName:BuildReferenceIndex {
  }
  withName:BuildSAMToolsIndex {
  }
  withName:BuildVCFIndex {
  }
  withName:ConcatVCF {
  }
  withName:MapReads {
    time = {params.runTime * task.attempt}
  }
  withName:MergeBams {
    cpus = { check_max( 4, 'cpus') }
    memory = {params.singleCPUMem * task.attempt}
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:MarkDuplicates {
  // Actually the -Xmx value should be kept lower,
    // and is set through the markdup_java_options
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName:RunBamQCmapped {
    cpus = 16
  }
  withName:RunBcftoolsStats {
    cpus = 1
  }
  withName:RunFastQC {
    cpus = 2 // FastQC is only capable of running one thread per fastq file.
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunFreeBayes {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
    time = {params.runTime * task.attempt}
  }
  withName:RunHaplotypecaller {
    cpus = 1
    // Increase memory quadratically
    memory = {params.singleCPUMem * task.attempt * task.attempt}
    time = {params.runTime * task.attempt}
  }
  withName:RunGenotypeGVCFs {
    cpus = 1
    memory = {params.singleCPUMem}
  }
  withName:RunManta {
  }
  withName:RunMultiQC {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunMutect2 {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
    time = {params.runTime * task.attempt}
  }
  withName:RunSamtoolsStats {
    cpus = 1
    time = {params.runTime * task.attempt}
  }
  withName:RunSingleManta {
  }
  withName:RunSingleStrelka {
    time = {params.runTime * task.attempt}
  }
  withName:RunStrelka {
    time = {params.runTime * task.attempt}
  }
  withName:RunVEP {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
}
