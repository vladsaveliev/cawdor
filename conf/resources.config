params {
  singleCPUMem  = 7.GB // for processes that are using more memory but a single CPU only. Use the 'core' queue for these
}

process {
  cpus = 1
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = { check_max( 48.h * task.attempt, 'time' ) }

  withName:MapReads {
    memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    cpus = { check_max( 16, 'cpus' ) }
  }
  withName:MarkDuplicates {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName:MergeBams {
    cpus = { check_max( 4, 'cpus') }
    memory = {params.singleCPUMem * task.attempt}
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunQualimap {
    cpus = { check_max( 6, 'cpus' ) }
    memory = { check_max( 70.GB, 'memory' ) }
  }
  withName:RunBcftoolsStats {
    cpus = { check_max( 1, 'cpus' ) }
  }
  withName:RunFastQC {
    cpus = { check_max( 2, 'cpus' ) } // FastQC is only capable of running one thread per fastq file.
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withName:CreateIntervalBeds {
    cpus = 1
  }
  withName:RunFreeBayes {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName:RunHaplotypecaller {
    cpus = { check_max( 1, 'cpus' ) }
    // Increase memory quadratically
    memory = { check_max( 7.GB * 2 * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunGenotypeGVCFs {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  }
  withName:RunMultiQC {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunMutect2 {
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 7.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunSamtoolsStats {
    cpus = { check_max( 2, 'cpus' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunManta {
    cpus = { check_max( 28, 'cpus' ) }
    memory = { check_max( 16.GB, 'memory') }
  }
  withName:RunSingleStrelka {
    cpus = { check_max( 20, 'cpus' ) }
    memory = { check_max( 16.GB, 'memory') }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunStrelkaBP {
    cpus = { check_max( 1, 'cpus' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:RunVEP {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max (32.GB * task.attempt, 'memory' ) }
  }
}

