/*
 * -------------------------------------------------
 * Nextflow config file for Sarek
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the configuration folder and imported under a
 * profile name here.
 */

params {
  genome = 'GRCh37'                      // Default reference genome is GRCh38
  max_cpus = 1                           // Base specifications
  max_memory = 2.GB                      // Base specifications
  max_time = 4.h                         // Base specifications
  nucleotidesPerSecond = 1000.0          // To estimate interval size by default
  onlyQC = false                         // All process will be run and not only the QC tools
  outDir = "${PWD}/cawdor_results"       // Path to output directory
  workDir =
  publishDirMode = 'link'                // publishDir mode is 'link' by default
  targetBED = false                      // no targets by default
  test = false                           // Not testing by default
  verbose = false                        // Enable for more verbose information
  email = false                          // Email notification 
  maxMultiqcEmailFileSize = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  awsqueue = false
  awsregion = 'ap-southeast-2'
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
  noQualimap = true
}

process {
  shell = ['/bin/bash', '-euo', 'pipefail']
  executor = 'local'

  errorStrategy = {task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 3

  cpus = params.max_cpus
  memory = params.max_memory
  time = params.max_time

  withName:CreateIntervalBeds {
    executor = 'local'
  }
}

report {  // Turning on execution report by default
  enabled = true
  file = "${params.outDir}/Reports/Report.html"
}

timeline { // Turning on timeline tracking by default
  enabled = true
  file = "${params.outDir}/Reports/Timeline.html"
}

dag { // Turning on dag by default
  enabled = true
  file = "${params.outDir}/Reports/DAG.svg"
}

trace { // Turning on trace tracking by default
  enabled = true
  fields = 'process,task_id,realtime,cpus,memory,%cpu,vmem,peak_vmem,rss,peak_rss,hash,name,native_id,attempt,status,exit,submit,start,complete,duration,rchar,wchar'
  file = "${params.outDir}/Reports/trace.txt"
}

// includeConfig 'conf/igenomes.config'
includeConfig 'conf/genomes.config'

profiles {
  // slurm profile for UPPMAX secure clusters
  // Runs the pipeline using the job scheduler
  // Singularity images are already set up
  spartan {
    includeConfig 'conf/spartan.config'
  }
  raijin {
    params.genomes_base = '/g/data3/gx8/projects/Saveliev_NF/Genomes'
    params.igenomes_base = '/g/data3/gx8/projects/Saveliev_NF/iGenomes'
    includeConfig 'conf/raijin.config'
  }
  vlad {
    params.genomes_base = '/Users/vsaveliev/git/vladsaveliev/workflows/References'
    includeConfig 'conf/laptop.config'  // resources config suitable for running test data on a laptop. for real data, use and HPC or cloud and include conf/resources.config
  }
}

manifest {
  name = 'cawdor'
  author = 'Vlad Saveliev'
  homePage = 'https://github.com/vladsaveliev/cawdor'
  description = 'UMCCR cancer analysis workflow for DNAseq and RNAseq data'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '0.1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory'){
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time'){
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
