/*
 * -------------------------------------------------
 * Nextflow config file for Sarek
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the configuration folder and imported under a
 * profile name here.
 */

includeConfig 'conf/base.config'
includeConfig 'conf/genomes.config'

profiles {
  // slurm profile for UPPMAX secure clusters
  // Runs the pipeline using the job scheduler
  // Singularity images are already set up
  spartan {
    includeConfig 'conf/spartan.config'
  }
  raijin {
    conda = '/g/data3/gx8/extras/vlad/miniconda/envs/umcaw'
    genome_base = '/g/data3/gx8/projects/Saveliev_NF/References'
    includeConfig 'conf/raijin.config'
  }
  vlad {
    conda = '/Users/vsaveliev/miniconda3/envs/nf'
    genome_base = '/Users/vsaveliev/git/vladsaveliev/workflows/References'
  }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory'){
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time'){
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
